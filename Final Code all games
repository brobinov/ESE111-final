//include libraries
#include <LiquidTWI2.h>
LiquidTWI2 lcd(0x20); // address of LCD on Arduino

#include <Keypad.h>

#include <SPI.h>
#include <WiFi101.h>

//for accelerometer
const int xPin = 1;
const int yPin = 2;
const int zPin = 3;

//for wifi
char ssid[] = "hp-setup-1"; // your network SSID (name)
char pass[] = "WelcomeHal"; // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0; // your network key Index number (needed only for WEP)
int status = WL_IDLE_STATUS;

boolean z = true;

//thingspeak server
char server[] = "api.thingspeak.com";
WiFiClient client;
//API key for the Thingspeak ThingHTTP
const String apiKey = "2OL65T0I9Z7SPAS7";
//the number the message should be sent to
const String sendNumber = "+16462834577";


//Declare variables
boolean playmain = true;
boolean x = false;
String y = "";
boolean notguessed = true;
boolean ans1 = false;
boolean ans2 = false;
boolean ans3 = false;
int counter1 = 0;
int correct = 0;
//for game 2
int tempRead = A0;

//for game 1
boolean win = true;
int nums[5];
String guess = "";
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
char keys[ROWS][COLS] = {
  {
    '1', '2', '3', 'A'
  }
  ,
  {
    '4', '5', '6', 'B'
  }
  ,
  {
    '7', '8', '9', 'C'
  }
  ,
  {
    '*', '0', '#', 'D'
  }
};
byte rowPins[ROWS] = {
  8, 9, 2, 4
}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {
  3, 5, 6, 7
}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
String s2 = "";
String s1 = "";
int a = 0;
int b = 0;
int count = 0;


void setup() {
  // put your setup code here, to run once:
  lcd.setMCPType(LTI_TYPE_MCP23008);
  lcd.begin(16, 2); // set LCD to have 16 rows & 2 columns
  lcd.setBacklight(HIGH); // sets light on LCD to bright
  Serial.begin(9600);
  pinMode(tempRead, INPUT);
  randomSeed(analogRead(0));
  pinMode(tempRead, INPUT);

}



void loop() {
  delay(10000);
  // put your main code here, to run repeatedly:
  static boolean intruder = false;
  //static boolean msg_sent = false;
  static long start_time;
  lcd.print("SOBR - sobriety test");
  delay(2000);
  lcd.clear();
  lcd.print("Pass 3 games or");
  lcd.setCursor(0,1);
  lcd.print("your friend will be");
  lcd.setCursor(0,2);
  lcd.print("texted an alert!");
  delay(5000);
  lcd.clear();
  ans1 = game1();
  if (ans1 == true){
    count++;
  }
  ans2 = game2();
  if (ans2 == true){
    count++;
  }
  ans3 = game3();
  if (ans3 == true){
    count++;
  }
  delay(1500);
  if (count > 1) {
    lcd.print("Tests passed!");
  }
  if (count < 2) { 
    lcd.print("Tests failed!");
    Serial.println("Sending SMS");
  

  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    // wait 10 seconds for connection:
    delay(10000);
  }
  Serial.println("Connected to wifi");
  printWifiStatus();
  //String txt = "Your friend Matteo is drunk. Please get in contact with him";
  sendSMS(sendNumber, URLEncode("Your friend Matteo is drunk. Please get in contact with him"));
    //this function will send the sms
    //the first argument is the number to send to, formatted like this +12345678901
    //the second argument is the body of the text message, which must be within URLEncode()
  }
  while (1) {}
}
  


boolean game3() {
  //printWifiStatus();
  lcd.print("Game 3");
  delay(2000);
  lcd.clear();
  for (int i = 1; i < 5; i++) {
    y = i;
    lcd.print("Round " + y);
    delay(2000);
    lcd.clear();
    lcd.print("Insert following");
    lcd.setCursor(0, 1);
    lcd.print("5 numbers");
    lcd.setCursor(0,2);
    lcd.print("SLOWLY");
    delay(4000);
    lcd.clear();
    lcd.print("Enter: #");
    lcd.setCursor(0, 1);
    lcd.print("Clear: *");
    delay(1000);
    lcd.clear();
    for (int i = 0; i < 5; i++) {
      a = random(10);
      nums[i] = a;
      while (a == b) {
        a = random(10);
        nums[i] = a;
      }
      Serial.println(nums[i]);
      s1 = s1 + nums[i];
      lcd.print(s1);
      delay(1000);
      lcd.clear();
      s1 = "";
      b = a;
      //delay(500);
    }
    //Serial.println("hi");
    while (x == false) {
      char key = keypad.getKey();
      if (key != NO_KEY) {
        Serial.println(key);
        s2 = s2 + key;
        lcd.print(s2);
        delay(1000);
        lcd.clear();
        s2 = "";
        if (key == '*') {
          guess = "";
        }
        else if (key == '#') {
          if (guess.length() == 0) {
              lcd.print("Fail");
              delay(1000);
              lcd.clear();
              win = false;
          }
          //else {
          for (int i = 0; i < guess.length(); i++) {
            if (guess.charAt(i) - 48 != nums[i]) {
              //Serial.println("Fail");
              lcd.print("Fail");
              delay(1000);
              lcd.clear();
              win = false;
              break;
            }

          }
          if (win) {
            //Serial.println("Pass");
            lcd.print("Pass");
            delay(1000);
            lcd.clear();
            correct++;
          }
          x = true;
          win = true;
          guess = "";
          counter1++;
        }
      //}
        else {
          guess += key;
          Serial.println(guess);
        }
      }
    }
    x = false;
  }
  if (correct > 1) {
    //Serial.println("true");
    lcd.clear();
    lcd.print("game passed");
    delay(1000);
    lcd.clear();
    return true;
  }
  else {
    //Serial.println("false");
    lcd.clear();
    lcd.print("game failed");
    delay(1000);
    lcd.clear();
    return false;
  }

}

boolean game2() {
  //printWifiStatus();
  lcd.print("Game 2");
  delay(2000);
  lcd.clear();
  lcd.print("Guess tempurature");
  lcd.setCursor(0, 1);
  lcd.print("within 10 degrees");
  lcd.setCursor(0,2);
  lcd.print("(fahrenheit)");
  delay(4000);
  lcd.clear();
  lcd.print("Enter: #");
  lcd.setCursor(0, 1);
  lcd.print("Clear: *");
  int tempVoltage = analogRead(tempRead);
  double temp = (tempVoltage / 1024.0) * 500;

  //Serial.println(temp);
  while (notguessed == true) {
    char key = keypad.getKey();
    if (key != NO_KEY) {
      Serial.println(key);
      if (key == '*') {
        guess = "";
      }
      else if (key == '#') {
        lcd.clear();
        lcd.print("Guess:" + guess);
        delay(1000);
        lcd.clear();
        int intGuess = guess.toInt();
        //Serial.println(abs(intGuess - temp));
        if (abs(intGuess - temp) < 10) {
          Serial.println("Pass");
          lcd.print("Pass");
          delay(2000);
          Serial.println(temp);
          notguessed = false;
          lcd.clear();
          guess = "";
          return true;
        }
        else {
          //Serial.println("Fail");
          lcd.print("Fail");
          delay(2000);
          Serial.println(temp);
          notguessed = false;
          lcd.clear();
          guess = "";
          return false;
        }
        guess = "";
      }
      else {
        guess += key;
      }
    }
  }

}

  boolean game1() {
  lcd.print("Game 1");
  lcd.setCursor(0,1);
  lcd.print("Stand still on 1 leg");
  lcd.setCursor(0,2);
  lcd.print("for 10 secs");
  delay(3000);
  lcd.clear();
  
  int counter = 0;
   for (int i = 0; i < 10; i++){
    int xRead = analogRead(xPin);
    int yRead = analogRead(yPin);
    int zRead = analogRead(zPin);
        Serial.print("x: ");
 Serial.print(xRead);
 Serial.print(" | y: ");
 Serial.print(yRead);
 Serial.print(" | z: ");
 Serial.println(zRead);
      if ((xRead >=480 && xRead <= 540) && (yRead >= 450 && yRead <= 530)) {
      counter++;
    }
    lcd.print(i+1);
    delay(1000);
    lcd.clear();
    }
    if (counter > 6) {
      lcd.print("pass!");
      Serial.println("pass");
      delay(2000);
      lcd.clear();
      return true;
    }
    else {
      Serial.println("fail");
      lcd.print("fail!");
      delay(2000);
      lcd.clear();
    
    return false;
    }
}
    
  void sendSMS(String number, String message) {

    // Make a TCP connection to remote host

    if (client.connect(server, 80)) {
      //should look like this...
      //api.thingspeak.com/apps/thinghttp/send_request?api_key={apikey}&number={send to number}&message={text body}
      client.print("GET /apps/thinghttp/send_request?api_key=");
      client.print(apiKey);
      client.print("&number=");
      client.print(number);
      client.print("&message=");
      client.print(message);
      client.println(" HTTP/1.1");
      client.print("Host: ");
      client.println(server);
      client.println("Connection: close");
      client.println();
    }
    else{
      Serial.println(F("Connection failed"));
    }
    // Check for a response from the server, and route it
    // out the serial port.
    while (client.connected())
    {
      if ( client.available() )
      {
        char c = client.read();
        Serial.print(c);
      }
    }
    Serial.println();
    client.stop();
  }

  String URLEncode(const char* msg){
    const char *hex = "0123456789abcdef";
    String encodedMsg = "";
    while (*msg != '\0') {
      if ( ('a' <= *msg && *msg <= 'z')
           || ('A' <= *msg && *msg <= 'Z')
           || ('0' <= *msg && *msg <= '9') ) {
        encodedMsg += *msg;
      }
      else {
        encodedMsg += '%';
        encodedMsg += hex[*msg >> 4];
        encodedMsg += hex[*msg & 15];
      }
      msg++;
    }
    return encodedMsg;
  }

  void printWifiStatus() {
    // print the SSID of the network you're attached to:
    Serial.print("SSID: ");
    Serial.println(WiFi.SSID());
    //print your WiFi shield's IP address:
    IPAddress ip = WiFi.localIP();
    Serial.print("IP Address: ");
    Serial.println(ip);
    // print the received signal strength:
    long rssi = WiFi.RSSI();
    Serial.print("signal strength (RSSI):");
    Serial.print(rssi);
    Serial.println(" dBm");

  }


